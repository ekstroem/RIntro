[["index.html", "Introduktion til R Kapitel 1 Om denne “bog” 1.1 Du kan hjælpe til", " Introduktion til R Claus Thorn Ekstrøm 2022-05-04 Kapitel 1 Om denne “bog” Denne hjemmeside indeholder udkastet til en intro-kapitel om R til en kommende danske lærebog i statistik. Kapitlet skal bruges som første skriftlige præsentation af R for de studerende, og tanken er, at kapitlet inkluderes som et appendiks i en statistiklærebog og bliver frit tilgængeligt online. Muligvis bliver kapitlet kun lagt online - det afhænger lidt af udformningen af resten af lærebogen. Fokus i lærebogen og på kurserne er på statistik, og det skal derfor ikke være en R bog. Samtidig er det imidlertid vigtigt at give læseren et værktøj, så de kan lave nogle af de almindelige beregninger, og det er her, at R kommer ind i billedet. Af samme grund indeholder kapitlet kun en minimale indføring i R - selve det at modellere, analysere, tegne grafik og fortolke resultaterne dukker op sammen med de pågældende statistikbegreber. 1.1 Du kan hjælpe til Kommentarer, forslag, rettelser og ideer modtages med kyshånd. Hvis du har lyst til at bidrage, så er du meget velkommen til at submitte pull-requests. Hvis ikke du er så velbevandret i git/github så er du også meget velkommen til at sende mig en mail eller finde mig på twitter / linkedIn og sende en besked der igennem. Layout er ikke vigtigt i denne omgang (og fodnoterne kommer til at fungere bedre i det endelige produkt), men alle kommentarer omkring indhold vil være gode! Lige en ting mere: Der er nogle enkelte symboler, der ikke bliver vist i denne version af onlinebogen. Det er ikke nødvendigt at kommentere på de steder (der er vist kun 2). Et eksempel ses nedenfor. Eksempel på “taster”, der ikke ses i onlineudgaven … endnu. "],["Rintro.html", "A Introduktion til R A.1 RStudio A.2 R som lommeregner A.3 Vektorer A.4 Data frames A.5 Tabeller og matricer A.6 Installation og brug af pakker A.7 Import af data A.8 Avanceret databehandling A.9 Opgaver", " A Introduktion til R R er et program og programmeringssprog designet til statistiske udregninger og grafik.1 Vi bruger R, fordi det er de facto standarden indenfor statistisk software, fordi det gør det let at reproducere sine resultater, og fordi R nyder godt af et stort og dynamisk brugermiljø. Det betyder, at mange nyudviklede visualiserings- og analysemetoder publiceres med kode til R, så alle brugere kan anvende disse nye metoder uden at skulle programmere dem selv. R fungerer ved at skrive kommandoer til programmet, som så udføres, og så snart man er fortrolig med programmet har man adgang til et af de stærkeste statistiske analyseværktøjer, der findes. A.1 RStudio Programmet RStudio udvider R og gør det lettere at arbejde med R. RStudio fungerer som editor, gør det nemt at lave reproducerbar forskning, håndtere grafik og giver let adgang til Rs hjælpesider. Det anbefales at installere RStudio, og når både R og RStudio er installeret kan man nøjes med at starte RStudio.2 RStudio er inddelt i fire mindre vinduer (se figur A.1). Øverste venstre vindue er en teksteditor, hvor man skriver sine R kommandoer.3 Kommandoerne i editoren udføres først, når man trykker “Run” på menubjælken (så bliver alle kommandoerne i editoren udført i rækkefølge), eller alternativt vil ( på Mac) udføre kodelinjen, som cursoren står på i editoren. Markeres flere linjer sendes de alle til R og eksekveres i rækkefølge. Figure A.1: RStudios brugergrænseflade er inddelt i 4 mindre vinduer: Øverst til venstre findes editoren, hvor man kan skrive, gemme og hente sit R program. Nederst til venstre er konsollen, hvor man har direte adgang til R, og hvor resultatet af udregningerne vises. Øverst til højre vises det nuværende workspace og historikken, og nederst til højre findes en filoversigt, og det er også her grafik, figurer og hjælpesider bliver vist. I nederste venstre vindue af RStudio findes konsollen, hvor selve R kører. Her vises er resultatet af udregningerne. Når kommandoer overføres fra editorvinduet som beskrevet ovenfor, så bliver de i praksis kopieret ned i konsollen linje for linje. Øverste højre vindue viser Rs workspace — en oversigt over objekterne i Rs hukommelse. Fanebladet “History” viser historikken over alle de kommandoer, der hidtil har været udført af R. Markerer man en eller flere af linjerne i historikken og dobbeltklikker på dem, så sendes de direkte til konsollen og bliver kørt igen. Det er også muligt at gemme hele historikken i en fil, så man den vej igennem kan dokumentere og genskabe de kommandoer, der har været kørt. Tegninger og grafik bliver vist nederst til højre, og herfra er det også muligt at eksportere figurer, så de kan anvendes i andre programmer. Beder man R om hjælp bliver det også vist i nederste højre vindue, og det er også her, at man finder en oversigt over filerne i det bibliotek, hvor R arbejder lige nu.4 A.1.1 Tricks når man arbejder med R Der er en række tricks, der er værd at kende, når man arbejder med R. I konsollen viser R en prompt, &gt;, når programmet er klar til at modtage kommandoer. Får man ikke færdiggjort en kommando skifter prompten til + og man har mulighed for at færdiggøre ordren. afbryder ordren og man kommer tilbage til &gt;. I konsollen vil og bladre op og ned i gamle kommandoer. Så slipper man for at skulle skrive gamle kommandoer helt forfra. Funktioner i R angives altid med parenteser og har formen funktionsnavn(argument1, argument2, ...), hvor det er muligt at give nul eller flere argumenter afhængigt af den konkrete funktion. På den måde kan man altid skelne mellem almindelige objekter og funktioner.5 RStudio gør det utrolig let at arbejde med R, da RStudio har “auto-completion”: når man starter med at taste i editoren eller konsollen foreslår RStudio, hvad der kunne stå, hvilket reducerer risikoen for tastefejl. Hvis man trykker færdiggør RStudio resten af navnet på det objekt/den funktion, som man er startet med at skrive. A.2 R som lommeregner R fungerer som en helt almindelig lommeregner. Taster man et regneudtryk ind i editoren (øverste venstre vindue), markerer det, og trykker ( på Mac) så bliver koden automatisk kopieret ned i konsollen og kørt. 1 + 5 # Dette er en kommentar: udregn 1 + 5 ## [1] 6 Alt efter # opfattes som en kommentar, så man kan skrive noter efter hver kommando, for senere at huske, hvad den gør. Svaret på 5+1 aflæses til 6.6 De fire almindelige regnearter: +, -, * og / fungerer som normalt ligesom ^ (opløftning i potens) samt naturligvis parenteser. 3 * (1 + 5) / (4 + 2^2) # Langt regneudtryk ## [1] 2.25 Udregningen af \\(\\frac{3\\cdot(1+5)}{4 + 2^2}\\) er 2.25. Resultatet af en udregning kan gemmes i et objekt, så de kan genbruges. R bruger “pilen” &lt;- til at gemme et objekt.7 Navnet på det gemte objekt kan vælges næsten frit: det skal dog starte med et bogstav og må ikke indeholde +, -, *, /, ^, ;, (, ) og komma. y &lt;- 5 # Gem værdien 5 i variablen y y # Udskriv værdien af y ## [1] 5 y * 2 # Udregn 2 * værdien af indholdet af y ## [1] 10 Mere komplicerede matematiske operationer kan udregnes ved hjælp af funktionerne vist i tabel A.1. Table A.1: De mest almindelig matematiske funktioner i R. Funktion Forklaring Eksempel abs(x) Numerisk (absolut) værdi abs(-3) = 3 sqrt(x) Kvadratrod sqrt(9) = 3 a^x \\(a\\) i \\(x\\)te potens 4^2 = 16 log(x) Naturlig logaritme log(10) = 2.303 log10(x) Titalslogaritme log10(10) = 1 log(x, base=2) Totalslogaritme log(10, base=2) = 3.322 exp(x) Eksponentialfunktionen exp(1) = 2.718 R skelner mellem store og små bogstaver, så Y og y er to forskellige objekter, hvilket kan give anledning til overraskelser, hvis man ikke er opmærksom på det.8 Y # Et ukendt objekt ## Error in eval(expr, envir, enclos): object &#39;Y&#39; not found R indeholder en ret veludbygget dokumentation, og hjælpesiden til en specifik funktion eller et datasæt kan ses med funktionen help(). help(sqrt) # Hent hjælpesiden for funktionen sqrt Ovennævnte henter hjælpesiderne for sqrt() frem og viser en grundig forklaring af funktionen og dens tilhørende argumenter. Kender man ikke kender navnet på den R funktion, man ønsker at bruge, kan help.search() søge hjælpesiderne igennem.9 help.search(&quot;box plot&quot;) # Find funktioner om &quot;box plot&quot; Dette viser en liste over de funktioner, hvor der står noget om “box plot”, hvilket giver en ide om, hvilke funktioner man skal lede efter. A.3 Vektorer Vektorer er en af Rs helt store styrker. En vektor er en samling af elementer af samme type — eksempelvis tal eller tekst. En vektor kan laves ved at bruge funktionen c() (for combine eller concatenate) til at “klistre” elementer sammen. hojde &lt;- c(1.65, 1.79, 1.62, 1.87) # Højde for 4 patienter hojde # Udskriv højderne ## [1] 1.65 1.79 1.62 1.87 vaegt &lt;- c(55.2, 89.7, 49.8, 92.1) # Vægt for samme 4 personer vaegt # Udskriv vægtene ## [1] 55.2 89.7 49.8 92.1 Fordelen ved vektorer er, at R kan lave samme udregning for hvert enkelt element i vektoren. Body-mass index (BMI)10 for alle fire personer udregnes ved bmi &lt;- vaegt / (hojde^2) # Udregn BMI og gem som bmi bmi # Udskriv bmi ## [1] 20.27548 27.99538 18.97577 26.33761 hvilket direkte giver resultaterne for alle fire patienter. Bemærk, at R regner elementvis, så det første element i hojde bruges sammen med det første element i vaegt og så videre. Rækkefølgen på målingerne er altså vigtig og skal passe sammen. Hvis vektorerne i en udregning ikke har samme længde, så undersøger R først, om længden af den korte vektor går op i længden af den lange vektor. Hvis det er tilfældet bliver den korte vektor gentaget indtil den har samme længde som den lange vektor.11 Hvis vi eksempelvis hellere ville have målt højderne i cm i stedet for i meter så skal vi gange alle værdierne med 100. hojde * 100 # Gang hver enkelt højdeværdi med 100 ## [1] 165 179 162 187 Denne udregning går godt, fordi hojde er en vektor af længde 4, og tallet 100 opfattes om en vektor af længde 1. Da 1 går op i 4 gentages værdien 100 4 gange indtil de to vektorer er lige lange, og så arbejder R elementvis igen. Vektorer er især nyttige i kombination med de indbyggede matematiske funktioner, da disse accepterer vektorer som input. For eksempel vil log() tage den naturlige logaritme af hvert element i en vektor. log(hojde) # Tag logaritmen til hvert element i hojde ## [1] 0.5007753 0.5822156 0.4824261 0.6259384 Nogle funktioner bruger hele vektoren til at udregne nye resultater. Eksempelvis udregnes gennemsnittet af de fire personers BMI ved at give vektoren til funktionen mean(). mean(bmi) # Udregn gennemsnittet af alle værdierne i bmi ## [1] 23.39606 R deler outputtet op i flere linjer for lange lange vektorer, der ikke kan udskrives på en enkelt linje. Input kan også splittes over flere linjer. Så skifter Rs inputprompt midlertidigt fra &gt; til + så det er tydeligt, at man skriver videre på linjen ovenfor. langvektor &lt;- c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109) langvektor ## [1] 1 3 5 7 9 2 4 6 8 10 20 21 22 23 24 25 26 27 28 ## [20] 29 30 100 101 102 103 104 105 106 107 108 109 Vektorer behøver ikke indeholde tal, men kan for eksempel også bestå af tekst eller logiske værdier (sandt eller falsk — benævnt TRUE eller FALSE i R). v2 &lt;- c(&quot;Bamse&quot;, &quot;Kylling&quot;, &quot;ælling&quot;) # En vektor af tekst v3 &lt;- c(TRUE, FALSE, FALSE) # En logisk vektor v4 &lt;- c(1, 2, 5) # En vektor af tal v2 # Udskriv v2 ## [1] &quot;Bamse&quot; &quot;Kylling&quot; &quot;ælling&quot; v3 # Udskriv v3 ## [1] TRUE FALSE FALSE v4 # Udskriv v4 ## [1] 1 2 5 A.3.1 Indicering i vektorer Man kan henvise til specifikke elementer i en vektor med en anden vektor med de relevante indices i skarpe paranteser. v2[c(2, 3)] # Udtræk element nummer 2 og 3 fra v2 ## [1] &quot;Kylling&quot; &quot;ælling&quot; Indicering kan også bruges til at ændre specifikke elementer. v2[3] &lt;- &quot;Ælling&quot; # Skift element 3 til at starte med stort v2 # Udskriv den nye v2 ## [1] &quot;Bamse&quot; &quot;Kylling&quot; &quot;Ælling&quot; Ved indicering kommer elementerne ud i den rækkefølge de bliver refereret, og man kan bytte rundt på elementernes rækkefølge ved at ændre rækkefølgen på indices. v2[c(2, 3, 1)] # Udskriv v2 i ny rækkefølge ## [1] &quot;Kylling&quot; &quot;Ælling&quot; &quot;Bamse&quot; Bemærk at v2 ikke ændres i ovennævnte kommando, da kommandoen blot udskriver en vektor, hvor der er byttet rundt på rækkefølgen. Resultatet skal gemmes, hvis det skal bruges i en anden sammenhæng: v5 &lt;- v2[c(2, 3, 1)] # Lav v5 med ny rækkefølge af v2 v5 ## [1] &quot;Kylling&quot; &quot;Ælling&quot; &quot;Bamse&quot; En logisk vektor af samme længde som den oprindelige vektor kan også bruges som indeks. Så udvælges netop de elementer, hvor den logiske vektor er sand. v2[v3] # Udskriv de elementer i v2, hvor v3 er sand ## [1] &quot;Bamse&quot; Denne funktionalitet er ekstra nyttig, hvis man gerne vil udvælge elementer på baggrund af værdierne i en anden vektor. v2[v4 &lt; 5] # Vælg værdier af v2, hvor v4 er mindre end 5 ## [1] &quot;Bamse&quot; &quot;Kylling&quot; Element 1 og 2 er netop de tilfælde, hvor værdien af v4 er mindre end 5. I R bruges en lidt speciel notation, hvis man vil vurdere om to objekter er ens. Man skal bruge to lighedstegn for at sammenligne om to objekter er ens. v2[v4==2] # Udvælg når v4 er 2. Bemærk to lighedstegn! ## [1] &quot;Kylling&quot; A.4 Data frames Data frames er Rs betegnelse for et datasæt, der indeholder en samling af vektorer (variablene i datasættet), der alle har samme længde. En data frame laves ved at sætte vektorer af samme længde sammen ved hjælp af funktionen data.frame(), og det er muligt at give vektorerne navne, når datasættet laves. Figure A.2: Man kan tænke på en data frame som et firkantet område af et regneark, hvor hver række svarer til en observation, en person eller en registrering, og hvor hver søjle svarer til en variabel. DF &lt;- data.frame(navn=v2, bjørn=v3, v4) # Lav data frame DF # Udskriv data frame ## navn bjørn v4 ## 1 Bamse TRUE 1 ## 2 Kylling FALSE 2 ## 3 Ælling FALSE 5 Variablene i en data frame eksisterer kun inde i selve data framen, hvilket er ret smart, da samme variabelnavn så kan benyttes i flere forskellige data frames uden at de overskriver hinanden. DF2 &lt;- data.frame(navn=c(&quot;Palle&quot;, &quot;Polle&quot;, &quot;Ruth&quot;), v4=c(1,2,3)) DF2 # Udskriv den nye data frame. Bemærk variablene navn og v4 ## navn v4 ## 1 Palle 1 ## 2 Polle 2 ## 3 Ruth 3 DF # Den gamle data frame. Har også variablene navn og v4 ## navn bjørn v4 ## 1 Bamse TRUE 1 ## 2 Kylling FALSE 2 ## 3 Ælling FALSE 5 Da variable i en data frame kun kan ses i den data frame, hvor de er defineret, er det nødvendigt at angive navnet på den relevante data frame, når variablen bruges i andre sammenhænge. Eksempelvis ved R ikke, om variablen v4 henviser til den pågældende variabel i DF, eller v4 fra DF2. Referencer til variable inde i en data frame opnås ved at bruge $ mellem navnet på data framen og variablen.12 DF$v4 # Hent v4 fra DF ## [1] 1 2 5 DF2$v4 # Hent v4 fra DF2 ## [1] 1 2 3 Nye variable kan tilføjes til en eksisterende data frame ved bare at definere til den nye variabel. Eneste krav er, at den nye variabel skal have samme længde som de øvrige variable.13 DF$sko &lt;- c(&quot;ja&quot;, &quot;nej&quot;, &quot;nej&quot;) # Lav variabel sko i DF DF ## navn bjørn v4 sko ## 1 Bamse TRUE 1 ja ## 2 Kylling FALSE 2 nej ## 3 Ælling FALSE 5 nej A.4.1 Indicering i data frames Data frames kan opfattes som firkantede regneark (se figur A.2), og man kan referere til specifikke elementer ved at bruge to indices svarende til rækker og søjler. # Hent anden observation fra tredie variabel # svarende til række 2 søjle 3 i DF DF[2, 3] ## [1] 2 Hele rækker og søjler udtrækkes ved at undlade at angive værdier for henholdsvis søjler og rækker. DF[3,] # Hent hele række 3 ## navn bjørn v4 sko ## 3 Ælling FALSE 5 nej DF[,c(2, 4)] # Hent søjler 2 og 4 ## bjørn sko ## 1 TRUE ja ## 2 FALSE nej ## 3 FALSE nej Ligesom for vektorer kan indicering bruges til at indsætte nye værdier for enkeltobservationer, rækker eller søjler. DF$v4[1] &lt;- 10 # Sæt første element af v4 i DF til 10 DF[,2] &lt;- c(TRUE, TRUE, FALSE) # Erstat hele 2. søjle DF # Udskriv data framen ## navn bjørn v4 sko ## 1 Bamse TRUE 10 ja ## 2 Kylling TRUE 2 nej ## 3 Ælling FALSE 5 nej Datasæt, der er del af R eller en R pakke (se afsnit A.6), gøres tilgængelige med kommandoen data(). Hvis data ligger i en pakke skal pakken først indlæses (se afsnit A.6). data(women) # Indlæs datasættet women head(women) # Vis de første 6 linjer ## height weight ## 1 58 115 ## 2 59 117 ## 3 60 120 ## 4 61 123 ## 5 62 126 ## 6 63 129 A.5 Tabeller og matricer En matrix er en “firkantet samling” af tal, hvilket kan bruges til at repræsentere antalstabeller.14 I R bruges matrix() til at lave en matrix, og man giver den en vektor af tal, der skal fyldes i matricen og fortæller, hvor mange rækker, der skal være. m &lt;- matrix(c(1, 2, 3, 4, 5, 6), 2) # Lav matrix med 2 rækker m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Det sidste tal, 2, i kaldet til matrix() ovenfor bestemmer antallet af rækker, som tallene skal fyldes ind i. Bemærk at matricen fyldes op søjlevis.15 Hvis antallet af rækker ikke går op i antallet af tal i vektoren, så genbruger R vektoren indtil den gør, og skriver en advarsel. m &lt;- matrix(c(1, 2, 3, 4, 5), 2) # Matrix med for få tal ## Warning in matrix(c(1, 2, 3, 4, 5), 2): data length [5] is not a sub-multiple or ## multiple of the number of rows [2] m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 1 De fem første elementer i matricen fyldes op med værdierne 1 til 5, hvorefter R genbruger vektoren forfra, så det sidste element bliver 1. Matricer indiceres på samme måde som data frames. Elementet i 1. række og 3. søjle er m[1, 3] ## [1] 5 A.6 Installation og brug af pakker Der findes mere end 15000 pakker, som udvider R med nye funktioner og datasæt. I RStudio kan nye pakker installeres via menupunktet Tools &gt; Install Packages (se figur A.3, hvor pakken isdals installeres). Alternativt kan en pakke installeres direkte i R med funktionen install.packages(). install.packages(&quot;isdals&quot;) # Installér pakken isdals Figure A.3: Installation af nye pakker gennem RStudios brugergrænseflade foregår via menupunktet Tools &gt; Install Packages. Her installeres pakken isdals fra CRAN, der er Rs officielle netværk af tilgængelige pakker. Det er kun nødvendigt at installere en pakke én gang. For at bruge funktionerne eller datasættene fra en pakke skal den indlæses, hvilket gøres med kommandoen library(). library(&quot;isdals&quot;) # Hent data og funktioner fra isdals For at spare på computerens hukommelse bliver installerede pakker kun indlæst, når brugeren ønsker det. Derfor skal library() køres hver gang R startes op, hvis den pågældende pakke skal bruges.16 A.7 Import af data R kan importere data direkte fra de fleste dataformater og -baser. De simpleste formater kan indlæses direkte af R, mens mere komplicerede dataformater kræver, at den relevante pakke er installeret (se tabel A.2 for en oversigt). Filnavnet angives som første argument, men indlæsningsfunktioner i tabel A.2 har lidt forskellige muligheder alt afhængigt af dataformatet. Eksempelvis vil følgende kode indlæse første ark fra Excelfilen forsøgsdata.xlsx.17 library(&quot;readxl&quot;) minedata &lt;- read_excel(&quot;forsøgsdata.xlsx&quot;, sheet=1) Table A.2: Funktioner og pakker til import af de mest almindelige dataformater i R. Filformat (typisk filnavn) Funktion Pakke Tekstfil (.txt) read.table() CSV (.csv) read.csv() eller read.csv2() Excel (.xlsx eller .xls) read_excel() readxl SPSS (.sav eller .por) read_sav() eller read_por() haven SAS (.sas7bdat) read_sas() haven Stata (.dta) read_stata() haven JSON (.json) fromJSON() jsonlite RStudio har en indbygget funktion til at importere dataset i tekstformat. En række almindelige tekstformater kan importeres via menupunktet File &gt; Import Dataset, der hjælper med indlæsningen. Nedenfor er vist indholdet af en CSV-fil patienter.csv.18 Navn;Alder;Status;BMI;Kon Jensen;61;1;31,4;M Hansen;26;0;23;M Petersen;77;0;28,3;K Jørgensen;53;1;24,6;K Figure A.4: Import af data gennem RStudios File &gt; Import Dataset &gt; From CSV. Her importeres data fra tekstfilen patienter.csv, og nederst er markeret, at søjleadskiller er semikolon. Den lille dialogboks dukker op ved tryk på ‘Configure’, og her kan man sætte decimaladskiller. Vinduet ‘Data preview’ viser, hvordan R ser filen med de givne indstillinger, og at det ser fornuftigt ud i dette tilfælde. R finder de fire søjler med de korrekte formater. Figur A.4 viser dialogboksen, der fremkommer, når man vælger File &gt; Import Dataset &gt; From CSV. Øverst vælges den tekstfil, der skal indlæses, og nederst kan man markere, at første linje i filen indeholder variabelnavnene (First Row as Names), og at variablene (søjlerne i filen) er adskilt med semikolon (Delimiter). Med knappen “Configure ..” dukker den lille dialogboks op, hvor man kan angive, at decimaladskiller er komma (det bruges i filen for variablen BMI) og ikke punktum, der er Rs almindelige decimaladskiller. Det store vindue “Data preview” viser, hvordan R ser den pågældende fil med de givne indstillinger. I figur A.4 ses det, at data indlæses som fire søjler svarende til de fire variable i den oprindelige fil, og det ses, at BMI er korrekt indlæst som en double (en numerisk variabel) med de korrekte værdier. Hvis indlæsningsindstillingerne er sat forkert bliver det klart i dette vindue, og man får en ide om, hvilke indstillinger der skal ændres. Nederst til højre i dialogboksen fremgår de kommandoer, som R kører for at indlæse filen. Disse kommandoer bør kopieres over i editoren, for at filen automatisk kan læses korrekt ind en anden gang.19 A.8 Avanceret databehandling Data skal ofte tilpasses før de er klar til analyser: der skal laves nye variable, XXX eller . tidyverse er et sæt af pakker til R, der gør databehandling meget let. Funktionerne i tidyverse arbejder naturligt sammen med Rs data frames (kaldet tibbles i tidyverse) og i funktionerne slipper man for at skulle referere til variable i data frames med $. , og desuden introduceres operatoren %&gt;%, som kan kæde resultaterne fra flere kommandoer sammen, så de bliver lettere at læse.20 Tabel A.3 viser de mest almindelige funktioner. Table A.3: De mest almindelige funktioner til datahåndtering ved hjælp af tidyverse. Funktion Forklaring arrange() Sortér data filter() Vælg observationer (rækker) group_by() Split data op i undergrupper mutate() Ændre/lav nye variable pivot_longer() Kombiner søjler, så datasættet bliver “langt” pivot_wider() Tag to søjler (navne og værdier) og gør data “bredt” pull() Udtræk en variabel som en vektor select() Vælg søjler (variable) summarise() Opsummere data ud fra grupper ungroup() Fjern undergrupper Til at vise databehandling med tidyverse bruger vi et datasæt om diabetes blandt 768 Pimaindianere. Datasættet hedder PimaIndiansDiabetes2 og findes i pakken mlbench.21 Først indlæses data og de første par linjer vises. library(&quot;mlbench&quot;) # Load pakke med data library(&quot;tidyverse&quot;) # Load tidyverse data(PimaIndiansDiabetes2) # Gør datasæt tilgængeligt head(PimaIndiansDiabetes2) # Vis de første 6 linjer ## pregnant glucose pressure triceps insulin mass pedigree age diabetes ## 1 6 148 72 35 NA 33.6 0.627 50 pos ## 2 1 85 66 29 NA 26.6 0.351 31 neg ## 3 8 183 64 NA NA 23.3 0.672 32 pos ## 4 1 89 66 23 94 28.1 0.167 21 neg ## 5 0 137 40 35 168 43.1 2.288 33 pos ## 6 5 116 74 NA NA 25.6 0.201 30 neg Vi vil her fokusere på variablene diabetes, age, mass (BMI) og pressure (diastolisk blodtryk). Disse udvælges med select(), og da resultatet skal bruges senere gemmes det i et nyt objekt.22 pima &lt;- PimaIndiansDiabetes2 %&gt;% select(diabetes, age, mass, pressure) Vil vi se nærmere på yngre, svært overvægtige personer, med BMI&gt;50 og med en alder mindre end 30 år kan vi bruge filter() til at udvælge de relevante personer. pima %&gt;% filter(mass&gt;50, age&lt;30) ## diabetes age mass pressure ## 121 pos 25 53.2 76 ## 126 pos 26 55.0 30 ## 178 pos 26 67.1 110 ## 248 neg 23 52.3 90 ## 304 pos 28 52.9 98 ## 446 pos 25 59.4 78 ## 674 neg 22 57.3 100 Flere kommandoer kan kombineres ved at bruge %&gt;% gentagne gange. arrange() bruges eksempelvis til at sortere efter en eller flere variable.23 pima %&gt;% filter(mass&gt;50, age&lt;30) %&gt;% arrange(pressure) ## diabetes age mass pressure ## 126 pos 26 55.0 30 ## 121 pos 25 53.2 76 ## 446 pos 25 59.4 78 ## 248 neg 23 52.3 90 ## 304 pos 28 52.9 98 ## 674 neg 22 57.3 100 ## 178 pos 26 67.1 110 Her er resultatet sorteret efter blodtryk. Nye variable kan defineres ved at bruge kommandoen mutate(). Eksempelvis kan vi lave en ny variabel, highbp, der angiver, om det diastoliske blodtryk er over 90 mmHg ud fra den eksisterende variabel pressure i datasættet. pima %&gt;% filter(mass&gt;50, age&lt;30) %&gt;% mutate(highbp = (pressure&gt;90)) ## diabetes age mass pressure highbp ## 121 pos 25 53.2 76 FALSE ## 126 pos 26 55.0 30 FALSE ## 178 pos 26 67.1 110 TRUE ## 248 neg 23 52.3 90 FALSE ## 304 pos 28 52.9 98 TRUE ## 446 pos 25 59.4 78 FALSE ## 674 neg 22 57.3 100 TRUE tidyverse indeholder to andre nyttige funktioner, summarise() og group_by(), der henholdsvis bruges til at opsummere data og at splitte data op i undergrupper for at lave opsummeringer for hver gruppe. Disse to funktioner introduceres nærmere i kapitel ??. A.9 Opgaver Brug R som lommeregner til at udregne følgende: \\(12\\cdot6\\) \\(2\\cdot(1+3)^2\\) \\(\\log(20) + \\sqrt{13}\\) Definer følgende to vektorer x &lt;- c(1, 3, 6, 2) y &lt;- c(10, 20) Overvej — uden at køre linjerne — hvad følgende kommandoer i R vil give x-2 x^2 x+y x*y length(x) sum(x) mean(x) sum(x^2) Brug R til at checke, om dine overvejelser var korrekte. Fødselsvægten (i gram), fostrets alder (i uger) og køn for 8 nyfødte er vist i tabellen nedenfor. Køn Alder (uge) Fødselsvægt (g) dreng 37 2628 dreng 38 3176 dreng 40 3421 dreng 38 2975 dreng 40 3317 pige 36 2729 pige 40 2935 pige 38 2754 Lav en vektor vaegt, der indeholder de 8 vægtmålinger. Brug for eksempel funktionen c(). Lav en vektor alder, der indeholder aldersmålingerne og en vektor kon, der indeholder informationen om køn. Udregn en ny vektor, kg, der indeholder de afrundede vægtmålinger i kg. Brug funktionen round() til at afrunde fødselsvægten til nærmeste 100 gram. Brug hjælpesiden til round() til at finde ud af, hvordan man vælger antallet af betydende cifre, når man afrunder. De nyfødte piger svarer til måling nummer 6, 7 og 8. Brug indicering af vektoren vaegt til at udtrække fødselsvægten for observation 6, 7 og 8. Hvad er den gennemsnitlige fødselsvægt for de tre piger? Det er sjældent, at man kender de specifikke observationsnumre, man vil udtrække. Brug i stedet oplysningerne fra vektoren kon til at udtrække fødselsvægten for pigerne. Lav en data frame, DF, der indeholder de 4 variable kon, alder, vaegt og kg. Prøv at køre kommandoen head(DF) Hvad viser den? Se hjælpesiden til head() for at se, hvordan man ændrer antallet af linjer, der vises.24 Prøv at køre kommandoen summary(DF) Hvad viser den? Hvorfor er formatet forskelligt for vaegt og kon? Erstat det 4. element af vaegt i DF fra 2975 til værdien 3075. Udregn den gennemsnitlige fødselsvægt for alle 8 personer i DF.25 Datasættet morbarn fra pakken stat4med indeholder oplysninger om en tilfældig stikprøve på 400 førstegangsfødende mødre fra det såkaldte Mor-Barn studie XXX, der følger levendefødte børn fra terminsugerne 37-42, og hvor moderen ikke drak under graviditeten. Datasættet indeholder seks registreringer om hver moder: alder (i år), ryger (ja/nej), kaffedrikker (ja/nej), uge (gestationsalder ved fødslen i uger), vaegt (barnets vægt i gram) og længde (barnets længde i cm). De efterfølgende spørgsmål kan med fordel besvare ved brug af funktionerne fra tidyverse pakken. Data kan indlæses ved at skrive kommandoen library(&quot;stat4med&quot;) # Indlæs pakken data(&quot;morbarn&quot;) # Gør data tilgængelige Hvad er gennemsnitsalderen for de 400 førstegangsfødende? Hvad er gennemsnitsvægten for de nyfødte? Lav en ny data frame kaldet deldata, der kun indeholder de mødre, der hverken ryger eller drikker kaffe.26 Lav fødselsvægt defineres ofte som børn, der har en fødselsvægt mellem 1500 til 2500 gram. Lav en ny variabel, lavvaegt, der er TRUE, hvis børnene har lav fødselsvægt, og FALSE ellers. Hvor mange børn har lav fødselsvægt?27 Hver gang man starter på et nyt projekt er det en god ide at lave et bibliotek på computeren, der indeholder alle data og R scripts. Det sikrer, at man har data og programmer samlet, og at man ikke får sammenblandet filer fra forskellige analyser. Når R starter op starter den typisk i samme bibliotek, og det kan være nødvendigt at sætte det bibliotek, hvor den skal finde og gemme filer. Brug funktionen getwd() (get working directory) til at se, hvilket bibliotek R leder efter filer i. Opret et ny bibliotek, testR på computeren. Brug stifinderen til at gøre dette. Sæt det nye arbejdsbibliotek til testR. Dette kan gøres i RStudio via menupunktet Session -&gt; Set Working Directory -&gt; Choose Directory. Et alternativ er at bruge funktionen setwd(). Kør getwd() igen for at checke at det nye arbejdsbibliotek er testR. Tabeller. Lav en matrix … Import af data. CSV? Excel? Ha’ en excel-fil på hjemmesiden. Læs den ind, gem som csv. Prøv at læse ind via … R kan hentes fra www.r-project.org. Fra hjemmesiden vælges først download (CRAN), derefter en server, hvorefter man kan hente og installere R.↩︎ RStudios hjemmeside er www.rstudio.com og herfra kan man downloade RStudio.↩︎ Kommandoerne i RStudios editor kan gemmes som dokumentation for de analyser, der er lavet. Filer med kommandoer til R har typisk efternavnet .R eller .r, men det er bare helt almindelige tekstfiler. Det anbefales at skrive alle kommandoerne i editoren, da det sikrer, at det er muligt at reproducere og genskabe alle resultater.↩︎ Opgave XXX viser, hvordan man skifter arbejdsbibliotek.↩︎ Hvis man skriver navnet på en funktion uden at angive parenteser så vises koden, som funktionen udfører. På den måde kan man direkte se, hvad de forskellige funktioner i R faktisk gør.↩︎ Foran resultatet står et [1], som vi kan ignorere indtil videre. Forklaringen kommer i afsnit A.3.↩︎ Pilen består af to tegn: &lt; (mindre end) og - (minus). Pilen &lt;- kan opfattes som om, at man sender resultatet over i det valgte objekt.↩︎ På samme vis er funktionen log() ikke det samme som funktionen LOG() eller Log().↩︎ Internettet er en rig ressource til at søge efter hjælp til R. Der er tusindevis af sider med hjælp, eksempler, forklaringer og videoer.↩︎ Body-mass index er defineret som en persons vægt (målt i kg) delt med højde (målt i meter) kvadreret.↩︎ Hvis længden af den korte vektor ikke går op i længden af den lange vektor så bliver den korte vektor stadig gentaget indtil den matcher længden af den lange, men en advarsel skrives på skærmen.↩︎ DF$v4 kan læses som “variabel v4 fra DF”, og den adskiller sig fra DF2$v4, der er en helt anden vektor (dog med samme navn), og som findes i data framen DF2.↩︎ Eller også skal længden på den korte vektor gå op i længden på de øvrige variable i data framen så den kan gentages til at have samme længde.↩︎ Data frames og matricer er begge rektangulære strukturer, men matricer kan kun indeholde tal. I en matrix er der til gengæld ikke nogen typeforskel på rækker og søjler.↩︎ Med argumentet byrow=TRUE til matrix() vil matricen blive fyldt op rækkevis i stedet for søjlevis.↩︎ install.packages() svarer til, at man installerer en lampe i et hus — det behøver man kun at gøre en gang. library() svarer til at tænde på kontakten, og det skal man huske at gøre, hver gang man starter på noget, og har brug for lyset.↩︎ Filen forsøgsdata.xlsx antages at ligge i samme bibliotek som R sessionen. Ellers skal den fulde sti til filen skrives.↩︎ En CSV-fil (comma-separated values) er en almindelig tekstfil, hvor søjlerne i datasættet er adskilt med comma, semikolon eller mellemrum.↩︎ Dette er specielt vigtigt for at kunne reproducere resultaterne. Hvis ikke de præcise argumenter til indlæsning bliver gemt, så risikerer man, at filen senere indlæses på en anden måde, hvilket kan resultere i andre resultater. ↩︎ %&gt;% kaldes også en “pipe”, da den kan kanalisere resultatet fra en funktion videre til den næste funktion.↩︎ Husk, at pakkerne skal installeres før datasættene og funktionerne i dem kan bruges.↩︎ Vi kan læse udtrykket som følger: “Tag PimaIndiansDiabetes2 og så udvælges variablene diabetes, age, mass og pressure ved hjælp af select()”. Operatoren %&gt;% læses som “og så”.↩︎ Igen kan udtrykket læses som “Tag datasættet, og så vælg først de rækker, hvor BMI er større end 50 og alder er mindre end 30 år. Og så skal dette resultat efterfølgende sorteres efter blodtryk (fra lav til høj). Vil man have sorteret fra høj til lav bruges arrange(desc(pressure)), hvor desc henviser til”descending”.↩︎ head() er særlig nyttig, hvis man vil have et hurtigt overblik over indholdet i en data frame eller en vektor.↩︎ Brug enten $ eller indicering til at trække den relevante variabel ud af data framen.↩︎ Husk, at man skal bruge to lighedstegn, når man checker om en variabel er lig en bestemt værdi.↩︎ Man kan bruge funktionen sum() til at tælle op, hvor ofte lavvaegt er TRUE.↩︎ "],["referencer.html", "Referencer", " Referencer "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
